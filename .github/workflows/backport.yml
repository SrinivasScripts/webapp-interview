name: Backport Full Flow (test-main ➔ test-stable ➔ test-develop)

on:
  pull_request:
    branches:
      - test-main
      - test-stable
    types: [closed]

env:
  PYTHON_VERSION: "3.11.11"

jobs:
  # STEP 1: Backport to test-stable when test-main PR is merged
  backport-to-test-stable:
    if: ${{ github.event.pull_request.merged && github.event.pull_request.base.ref == 'test-main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set remote URL to use BOT_ACCESS_TOKEN
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.BOT_ACCESS_TOKEN }}@github.com/${{ github.repository }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create backport branch from test-main
        run: |
          git checkout test-main
          git pull origin test-main
          git checkout -b backport-to-test-stable

      - name: Merge latest stable
        run: |
          git fetch origin
          git merge origin/test-stable --no-ff --no-edit || true

      - name: Update version
        id: version_stable
        run: |
          VERSION=$(grep -E '^version = *"' pyproject.toml | head -n1 | sed -E 's/version = "([^"]+)"/\1/')
          MAJOR_MINOR=$(echo $VERSION | cut -d. -f1-3)
          DATE=$(date +'%Y%m%d')
          NEW_VERSION="${MAJOR_MINOR}.${DATE}"
          sed -i "s/version = \"$VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          git add pyproject.toml
          git commit -m "Update version to $NEW_VERSION" || echo "No changes to commit"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push backport branch
        run: git push origin backport-to-test-stable

      - name: Create PR to test-stable
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.BOT_ACCESS_TOKEN }}
          branch: backport-to-test-stable
          base: test-stable
          title: '[AUTO] Backport full changes test-main -> test-stable'
          commit-message: '[AUTO] Full backport from test-main to test-stable'
          body: |
            This PR includes full changes from test-main to test-stable, including version bump.

  # STEP 2: Backport to test-develop when test-stable PR is merged
  backport-to-test-develop:
    if: ${{ github.event.pull_request.merged && github.event.pull_request.base.ref == 'test-stable' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set remote URL to use BOT_ACCESS_TOKEN
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.BOT_ACCESS_TOKEN }}@github.com/${{ github.repository }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create backport branch from test-stable
        run: |
          git checkout test-stable
          git pull origin test-stable
          git checkout -b backport-to-test-develop

      - name: Merge latest develop
        run: |
          git fetch origin
          git merge origin/test-develop --no-ff --no-edit || true

      - name: Update version
        id: version_develop
        run: |
          VERSION=$(grep -E '^version = *"' pyproject.toml | head -n1 | sed -E 's/version = "([^"]+)"/\1/')
          MAJOR_MINOR=$(echo $VERSION | cut -d. -f1-3)
          DATE=$(date +'%Y%m%d')
          NEW_VERSION="${MAJOR_MINOR}.${DATE}-dev"
          sed -i "s/version = \"$VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          git add pyproject.toml
          git commit -m "Backport to test-develop: $NEW_VERSION" || echo "No changes to commit"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push backport branch
        run: git push origin backport-to-test-develop

      - name: Create PR to test-develop
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.BOT_ACCESS_TOKEN }}
          branch: backport-to-test-develop
          base: test-develop
          title: '[AUTO] Backport full changes test-stable -> test-develop'
          commit-message: '[AUTO] Full backport from test-stable to test-develop'
          body: |
            This PR includes full changes from test-stable to test-develop, including version bump.
